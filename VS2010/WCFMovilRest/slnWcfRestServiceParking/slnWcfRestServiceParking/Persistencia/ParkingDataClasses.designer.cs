#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace slnWcfRestServiceParking.Persistencia
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_9FA6E8_parkingResBD")]
	public partial class ParkingDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdepartment(department instance);
    partial void Updatedepartment(department instance);
    partial void Deletedepartment(department instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertdisctrict(disctrict instance);
    partial void Updatedisctrict(disctrict instance);
    partial void Deletedisctrict(disctrict instance);
    partial void InsertparkingLot(parkingLot instance);
    partial void UpdateparkingLot(parkingLot instance);
    partial void DeleteparkingLot(parkingLot instance);
    partial void InsertparkingSpace(parkingSpace instance);
    partial void UpdateparkingSpace(parkingSpace instance);
    partial void DeleteparkingSpace(parkingSpace instance);
    partial void Insertprovider(provider instance);
    partial void Updateprovider(provider instance);
    partial void Deleteprovider(provider instance);
    partial void Insertprovince(province instance);
    partial void Updateprovince(province instance);
    partial void Deleteprovince(province instance);
    partial void Insertreservation(reservation instance);
    partial void Updatereservation(reservation instance);
    partial void Deletereservation(reservation instance);
    #endregion
		
		public ParkingDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DB_9FA6E8_parkingResBDConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ParkingDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParkingDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParkingDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParkingDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<department> departments
		{
			get
			{
				return this.GetTable<department>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<disctrict> disctricts
		{
			get
			{
				return this.GetTable<disctrict>();
			}
		}
		
		public System.Data.Linq.Table<parkingLot> parkingLots
		{
			get
			{
				return this.GetTable<parkingLot>();
			}
		}
		
		public System.Data.Linq.Table<parkingSpace> parkingSpaces
		{
			get
			{
				return this.GetTable<parkingSpace>();
			}
		}
		
		public System.Data.Linq.Table<provider> providers
		{
			get
			{
				return this.GetTable<provider>();
			}
		}
		
		public System.Data.Linq.Table<province> provinces
		{
			get
			{
				return this.GetTable<province>();
			}
		}
		
		public System.Data.Linq.Table<reservation> reservations
		{
			get
			{
				return this.GetTable<reservation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.department")]
	public partial class department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _departmentId;
		
		private string _name;
		
		private EntitySet<province> _provinces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndepartmentIdChanging(int value);
    partial void OndepartmentIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public department()
		{
			this._provinces = new EntitySet<province>(new Action<province>(this.attach_provinces), new Action<province>(this.detach_provinces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int departmentId
		{
			get
			{
				return this._departmentId;
			}
			set
			{
				if ((this._departmentId != value))
				{
					this.OndepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._departmentId = value;
					this.SendPropertyChanged("departmentId");
					this.OndepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="department_province", Storage="_provinces", ThisKey="departmentId", OtherKey="departmentId")]
		public EntitySet<province> provinces
		{
			get
			{
				return this._provinces;
			}
			set
			{
				this._provinces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_provinces(province entity)
		{
			this.SendPropertyChanging();
			entity.department = this;
		}
		
		private void detach_provinces(province entity)
		{
			this.SendPropertyChanging();
			entity.department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _name;
		
		private string _lastName;
		
		private string _email;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _registerDate;
		
		private bool _status;
		
		private EntitySet<provider> _providers;
		
		private EntitySet<reservation> _reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnregisterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnregisterDateChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    #endregion
		
		public user()
		{
			this._providers = new EntitySet<provider>(new Action<provider>(this.attach_providers), new Action<provider>(this.detach_providers));
			this._reservations = new EntitySet<reservation>(new Action<reservation>(this.attach_reservations), new Action<reservation>(this.detach_reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(50)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registerDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> registerDate
		{
			get
			{
				return this._registerDate;
			}
			set
			{
				if ((this._registerDate != value))
				{
					this.OnregisterDateChanging(value);
					this.SendPropertyChanging();
					this._registerDate = value;
					this.SendPropertyChanged("registerDate");
					this.OnregisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_provider", Storage="_providers", ThisKey="userID", OtherKey="userID")]
		public EntitySet<provider> providers
		{
			get
			{
				return this._providers;
			}
			set
			{
				this._providers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_reservation", Storage="_reservations", ThisKey="userID", OtherKey="userID")]
		public EntitySet<reservation> reservations
		{
			get
			{
				return this._reservations;
			}
			set
			{
				this._reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_providers(provider entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_providers(provider entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_reservations(reservation entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_reservations(reservation entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.disctrict")]
	public partial class disctrict : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _districtId;
		
		private string _name;
		
		private int _provinceId;
		
		private EntityRef<province> _province;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndistrictIdChanging(int value);
    partial void OndistrictIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnprovinceIdChanging(int value);
    partial void OnprovinceIdChanged();
    #endregion
		
		public disctrict()
		{
			this._province = default(EntityRef<province>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_districtId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int districtId
		{
			get
			{
				return this._districtId;
			}
			set
			{
				if ((this._districtId != value))
				{
					this.OndistrictIdChanging(value);
					this.SendPropertyChanging();
					this._districtId = value;
					this.SendPropertyChanged("districtId");
					this.OndistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provinceId", DbType="Int NOT NULL")]
		public int provinceId
		{
			get
			{
				return this._provinceId;
			}
			set
			{
				if ((this._provinceId != value))
				{
					if (this._province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprovinceIdChanging(value);
					this.SendPropertyChanging();
					this._provinceId = value;
					this.SendPropertyChanged("provinceId");
					this.OnprovinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="province_disctrict", Storage="_province", ThisKey="provinceId", OtherKey="provinceId", IsForeignKey=true)]
		public province province
		{
			get
			{
				return this._province.Entity;
			}
			set
			{
				province previousValue = this._province.Entity;
				if (((previousValue != value) 
							|| (this._province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._province.Entity = null;
						previousValue.disctricts.Remove(this);
					}
					this._province.Entity = value;
					if ((value != null))
					{
						value.disctricts.Add(this);
						this._provinceId = value.provinceId;
					}
					else
					{
						this._provinceId = default(int);
					}
					this.SendPropertyChanged("province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.parkingLot")]
	public partial class parkingLot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _parkingLotID;
		
		private int _providerID;
		
		private string _name;
		
		private string _address;
		
		private int _districtId;
		
		private string _department;
		
		private string _description;
		
		private string _urlPicture;
		
		private double _longitud;
		
		private double _latitude;
		
		private string _LocalPhone;
		
		private string _openTime;
		
		private string _closeTime;
		
		private double _priceHour;
		
		private bool _status;
		
		private EntitySet<parkingSpace> _parkingSpaces;
		
		private EntityRef<provider> _provider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnparkingLotIDChanging(int value);
    partial void OnparkingLotIDChanged();
    partial void OnproviderIDChanging(int value);
    partial void OnproviderIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OndistrictIdChanging(int value);
    partial void OndistrictIdChanged();
    partial void OndepartmentChanging(string value);
    partial void OndepartmentChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnurlPictureChanging(string value);
    partial void OnurlPictureChanged();
    partial void OnlongitudChanging(double value);
    partial void OnlongitudChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnLocalPhoneChanging(string value);
    partial void OnLocalPhoneChanged();
    partial void OnopenTimeChanging(string value);
    partial void OnopenTimeChanged();
    partial void OncloseTimeChanging(string value);
    partial void OncloseTimeChanged();
    partial void OnpriceHourChanging(double value);
    partial void OnpriceHourChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    #endregion
		
		public parkingLot()
		{
			this._parkingSpaces = new EntitySet<parkingSpace>(new Action<parkingSpace>(this.attach_parkingSpaces), new Action<parkingSpace>(this.detach_parkingSpaces));
			this._provider = default(EntityRef<provider>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parkingLotID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int parkingLotID
		{
			get
			{
				return this._parkingLotID;
			}
			set
			{
				if ((this._parkingLotID != value))
				{
					this.OnparkingLotIDChanging(value);
					this.SendPropertyChanging();
					this._parkingLotID = value;
					this.SendPropertyChanged("parkingLotID");
					this.OnparkingLotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_providerID", DbType="Int NOT NULL")]
		public int providerID
		{
			get
			{
				return this._providerID;
			}
			set
			{
				if ((this._providerID != value))
				{
					if (this._provider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproviderIDChanging(value);
					this.SendPropertyChanging();
					this._providerID = value;
					this.SendPropertyChanged("providerID");
					this.OnproviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_districtId", DbType="Int NOT NULL")]
		public int districtId
		{
			get
			{
				return this._districtId;
			}
			set
			{
				if ((this._districtId != value))
				{
					this.OndistrictIdChanging(value);
					this.SendPropertyChanging();
					this._districtId = value;
					this.SendPropertyChanged("districtId");
					this.OndistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_department", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string department
		{
			get
			{
				return this._department;
			}
			set
			{
				if ((this._department != value))
				{
					this.OndepartmentChanging(value);
					this.SendPropertyChanging();
					this._department = value;
					this.SendPropertyChanged("department");
					this.OndepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_urlPicture", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string urlPicture
		{
			get
			{
				return this._urlPicture;
			}
			set
			{
				if ((this._urlPicture != value))
				{
					this.OnurlPictureChanging(value);
					this.SendPropertyChanging();
					this._urlPicture = value;
					this.SendPropertyChanged("urlPicture");
					this.OnurlPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitud", DbType="Float NOT NULL")]
		public double longitud
		{
			get
			{
				return this._longitud;
			}
			set
			{
				if ((this._longitud != value))
				{
					this.OnlongitudChanging(value);
					this.SendPropertyChanging();
					this._longitud = value;
					this.SendPropertyChanged("longitud");
					this.OnlongitudChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalPhone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LocalPhone
		{
			get
			{
				return this._LocalPhone;
			}
			set
			{
				if ((this._LocalPhone != value))
				{
					this.OnLocalPhoneChanging(value);
					this.SendPropertyChanging();
					this._LocalPhone = value;
					this.SendPropertyChanged("LocalPhone");
					this.OnLocalPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_openTime", DbType="NChar(10)")]
		public string openTime
		{
			get
			{
				return this._openTime;
			}
			set
			{
				if ((this._openTime != value))
				{
					this.OnopenTimeChanging(value);
					this.SendPropertyChanging();
					this._openTime = value;
					this.SendPropertyChanged("openTime");
					this.OnopenTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_closeTime", DbType="NChar(10)")]
		public string closeTime
		{
			get
			{
				return this._closeTime;
			}
			set
			{
				if ((this._closeTime != value))
				{
					this.OncloseTimeChanging(value);
					this.SendPropertyChanging();
					this._closeTime = value;
					this.SendPropertyChanged("closeTime");
					this.OncloseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priceHour", DbType="Float NOT NULL")]
		public double priceHour
		{
			get
			{
				return this._priceHour;
			}
			set
			{
				if ((this._priceHour != value))
				{
					this.OnpriceHourChanging(value);
					this.SendPropertyChanging();
					this._priceHour = value;
					this.SendPropertyChanged("priceHour");
					this.OnpriceHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parkingLot_parkingSpace", Storage="_parkingSpaces", ThisKey="parkingLotID", OtherKey="parkingLotID")]
		public EntitySet<parkingSpace> parkingSpaces
		{
			get
			{
				return this._parkingSpaces;
			}
			set
			{
				this._parkingSpaces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="provider_parkingLot", Storage="_provider", ThisKey="providerID", OtherKey="providerID", IsForeignKey=true)]
		public provider provider
		{
			get
			{
				return this._provider.Entity;
			}
			set
			{
				provider previousValue = this._provider.Entity;
				if (((previousValue != value) 
							|| (this._provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._provider.Entity = null;
						previousValue.parkingLots.Remove(this);
					}
					this._provider.Entity = value;
					if ((value != null))
					{
						value.parkingLots.Add(this);
						this._providerID = value.providerID;
					}
					else
					{
						this._providerID = default(int);
					}
					this.SendPropertyChanged("provider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_parkingSpaces(parkingSpace entity)
		{
			this.SendPropertyChanging();
			entity.parkingLot = this;
		}
		
		private void detach_parkingSpaces(parkingSpace entity)
		{
			this.SendPropertyChanging();
			entity.parkingLot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.parkingSpace")]
	public partial class parkingSpace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _parkingSpaceID;
		
		private int _parkingLotID;
		
		private string _shortName;
		
		private bool _status;
		
		private EntitySet<reservation> _reservations;
		
		private EntityRef<parkingLot> _parkingLot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnparkingSpaceIDChanging(int value);
    partial void OnparkingSpaceIDChanged();
    partial void OnparkingLotIDChanging(int value);
    partial void OnparkingLotIDChanged();
    partial void OnshortNameChanging(string value);
    partial void OnshortNameChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    #endregion
		
		public parkingSpace()
		{
			this._reservations = new EntitySet<reservation>(new Action<reservation>(this.attach_reservations), new Action<reservation>(this.detach_reservations));
			this._parkingLot = default(EntityRef<parkingLot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parkingSpaceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int parkingSpaceID
		{
			get
			{
				return this._parkingSpaceID;
			}
			set
			{
				if ((this._parkingSpaceID != value))
				{
					this.OnparkingSpaceIDChanging(value);
					this.SendPropertyChanging();
					this._parkingSpaceID = value;
					this.SendPropertyChanged("parkingSpaceID");
					this.OnparkingSpaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parkingLotID", DbType="Int NOT NULL")]
		public int parkingLotID
		{
			get
			{
				return this._parkingLotID;
			}
			set
			{
				if ((this._parkingLotID != value))
				{
					if (this._parkingLot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparkingLotIDChanging(value);
					this.SendPropertyChanging();
					this._parkingLotID = value;
					this.SendPropertyChanged("parkingLotID");
					this.OnparkingLotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string shortName
		{
			get
			{
				return this._shortName;
			}
			set
			{
				if ((this._shortName != value))
				{
					this.OnshortNameChanging(value);
					this.SendPropertyChanging();
					this._shortName = value;
					this.SendPropertyChanged("shortName");
					this.OnshortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parkingSpace_reservation", Storage="_reservations", ThisKey="parkingSpaceID", OtherKey="parkingSpaceID")]
		public EntitySet<reservation> reservations
		{
			get
			{
				return this._reservations;
			}
			set
			{
				this._reservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parkingLot_parkingSpace", Storage="_parkingLot", ThisKey="parkingLotID", OtherKey="parkingLotID", IsForeignKey=true)]
		public parkingLot parkingLot
		{
			get
			{
				return this._parkingLot.Entity;
			}
			set
			{
				parkingLot previousValue = this._parkingLot.Entity;
				if (((previousValue != value) 
							|| (this._parkingLot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._parkingLot.Entity = null;
						previousValue.parkingSpaces.Remove(this);
					}
					this._parkingLot.Entity = value;
					if ((value != null))
					{
						value.parkingSpaces.Add(this);
						this._parkingLotID = value.parkingLotID;
					}
					else
					{
						this._parkingLotID = default(int);
					}
					this.SendPropertyChanged("parkingLot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_reservations(reservation entity)
		{
			this.SendPropertyChanging();
			entity.parkingSpace = this;
		}
		
		private void detach_reservations(reservation entity)
		{
			this.SendPropertyChanging();
			entity.parkingSpace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.provider")]
	public partial class provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _providerID;
		
		private int _userID;
		
		private bool _status;
		
		private EntitySet<parkingLot> _parkingLots;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnproviderIDChanging(int value);
    partial void OnproviderIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    #endregion
		
		public provider()
		{
			this._parkingLots = new EntitySet<parkingLot>(new Action<parkingLot>(this.attach_parkingLots), new Action<parkingLot>(this.detach_parkingLots));
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_providerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int providerID
		{
			get
			{
				return this._providerID;
			}
			set
			{
				if ((this._providerID != value))
				{
					this.OnproviderIDChanging(value);
					this.SendPropertyChanging();
					this._providerID = value;
					this.SendPropertyChanged("providerID");
					this.OnproviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="provider_parkingLot", Storage="_parkingLots", ThisKey="providerID", OtherKey="providerID")]
		public EntitySet<parkingLot> parkingLots
		{
			get
			{
				return this._parkingLots;
			}
			set
			{
				this._parkingLots.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_provider", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.providers.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.providers.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_parkingLots(parkingLot entity)
		{
			this.SendPropertyChanging();
			entity.provider = this;
		}
		
		private void detach_parkingLots(parkingLot entity)
		{
			this.SendPropertyChanging();
			entity.provider = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.province")]
	public partial class province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _provinceId;
		
		private string _nombre;
		
		private System.Nullable<int> _departmentId;
		
		private EntitySet<disctrict> _disctricts;
		
		private EntityRef<department> _department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprovinceIdChanging(int value);
    partial void OnprovinceIdChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    partial void OndepartmentIdChanging(System.Nullable<int> value);
    partial void OndepartmentIdChanged();
    #endregion
		
		public province()
		{
			this._disctricts = new EntitySet<disctrict>(new Action<disctrict>(this.attach_disctricts), new Action<disctrict>(this.detach_disctricts));
			this._department = default(EntityRef<department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provinceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int provinceId
		{
			get
			{
				return this._provinceId;
			}
			set
			{
				if ((this._provinceId != value))
				{
					this.OnprovinceIdChanging(value);
					this.SendPropertyChanging();
					this._provinceId = value;
					this.SendPropertyChanged("provinceId");
					this.OnprovinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre", DbType="VarChar(100)")]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentId", DbType="Int")]
		public System.Nullable<int> departmentId
		{
			get
			{
				return this._departmentId;
			}
			set
			{
				if ((this._departmentId != value))
				{
					if (this._department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._departmentId = value;
					this.SendPropertyChanged("departmentId");
					this.OndepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="province_disctrict", Storage="_disctricts", ThisKey="provinceId", OtherKey="provinceId")]
		public EntitySet<disctrict> disctricts
		{
			get
			{
				return this._disctricts;
			}
			set
			{
				this._disctricts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="department_province", Storage="_department", ThisKey="departmentId", OtherKey="departmentId", IsForeignKey=true)]
		public department department
		{
			get
			{
				return this._department.Entity;
			}
			set
			{
				department previousValue = this._department.Entity;
				if (((previousValue != value) 
							|| (this._department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._department.Entity = null;
						previousValue.provinces.Remove(this);
					}
					this._department.Entity = value;
					if ((value != null))
					{
						value.provinces.Add(this);
						this._departmentId = value.departmentId;
					}
					else
					{
						this._departmentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_disctricts(disctrict entity)
		{
			this.SendPropertyChanging();
			entity.province = this;
		}
		
		private void detach_disctricts(disctrict entity)
		{
			this.SendPropertyChanging();
			entity.province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reservation")]
	public partial class reservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _reservationID;
		
		private int _parkingSpaceID;
		
		private int _userID;
		
		private System.DateTime _dateReservation;
		
		private System.DateTime _startParking;
		
		private System.DateTime _finishParking;
		
		private bool _status;
		
		private EntityRef<parkingSpace> _parkingSpace;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreservationIDChanging(int value);
    partial void OnreservationIDChanged();
    partial void OnparkingSpaceIDChanging(int value);
    partial void OnparkingSpaceIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OndateReservationChanging(System.DateTime value);
    partial void OndateReservationChanged();
    partial void OnstartParkingChanging(System.DateTime value);
    partial void OnstartParkingChanged();
    partial void OnfinishParkingChanging(System.DateTime value);
    partial void OnfinishParkingChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    #endregion
		
		public reservation()
		{
			this._parkingSpace = default(EntityRef<parkingSpace>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reservationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int reservationID
		{
			get
			{
				return this._reservationID;
			}
			set
			{
				if ((this._reservationID != value))
				{
					this.OnreservationIDChanging(value);
					this.SendPropertyChanging();
					this._reservationID = value;
					this.SendPropertyChanged("reservationID");
					this.OnreservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parkingSpaceID", DbType="Int NOT NULL")]
		public int parkingSpaceID
		{
			get
			{
				return this._parkingSpaceID;
			}
			set
			{
				if ((this._parkingSpaceID != value))
				{
					if (this._parkingSpace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparkingSpaceIDChanging(value);
					this.SendPropertyChanging();
					this._parkingSpaceID = value;
					this.SendPropertyChanged("parkingSpaceID");
					this.OnparkingSpaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateReservation", DbType="DateTime NOT NULL")]
		public System.DateTime dateReservation
		{
			get
			{
				return this._dateReservation;
			}
			set
			{
				if ((this._dateReservation != value))
				{
					this.OndateReservationChanging(value);
					this.SendPropertyChanging();
					this._dateReservation = value;
					this.SendPropertyChanged("dateReservation");
					this.OndateReservationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startParking", DbType="DateTime NOT NULL")]
		public System.DateTime startParking
		{
			get
			{
				return this._startParking;
			}
			set
			{
				if ((this._startParking != value))
				{
					this.OnstartParkingChanging(value);
					this.SendPropertyChanging();
					this._startParking = value;
					this.SendPropertyChanged("startParking");
					this.OnstartParkingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finishParking", DbType="DateTime NOT NULL")]
		public System.DateTime finishParking
		{
			get
			{
				return this._finishParking;
			}
			set
			{
				if ((this._finishParking != value))
				{
					this.OnfinishParkingChanging(value);
					this.SendPropertyChanging();
					this._finishParking = value;
					this.SendPropertyChanged("finishParking");
					this.OnfinishParkingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="parkingSpace_reservation", Storage="_parkingSpace", ThisKey="parkingSpaceID", OtherKey="parkingSpaceID", IsForeignKey=true)]
		public parkingSpace parkingSpace
		{
			get
			{
				return this._parkingSpace.Entity;
			}
			set
			{
				parkingSpace previousValue = this._parkingSpace.Entity;
				if (((previousValue != value) 
							|| (this._parkingSpace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._parkingSpace.Entity = null;
						previousValue.reservations.Remove(this);
					}
					this._parkingSpace.Entity = value;
					if ((value != null))
					{
						value.reservations.Add(this);
						this._parkingSpaceID = value.parkingSpaceID;
					}
					else
					{
						this._parkingSpaceID = default(int);
					}
					this.SendPropertyChanged("parkingSpace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_reservation", Storage="_user", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.reservations.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.reservations.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
